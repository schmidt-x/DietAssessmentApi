// <auto-generated />
using DietAssessmentApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DietAssessmentApi.Data.Migrations
{
    [DbContext(typeof(NutrientContext))]
    [Migration("20250713121329_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DietAssessmentApi.Domain.Entities.Nutrient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("RecommendedIntakeFrom")
                        .HasColumnType("double precision");

                    b.Property<double>("RecommendedIntakeTo")
                        .HasColumnType("double precision");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Nutrients");
                });

            modelBuilder.Entity("DietAssessmentApi.Domain.Entities.NutrientReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Intake")
                        .HasColumnType("double precision");

                    b.Property<int>("NutrientId")
                        .HasColumnType("integer");

                    b.Property<double>("RecFromFood")
                        .HasColumnType("double precision");

                    b.Property<double>("RecFromSupplement")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("NutrientId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("DietAssessmentApi.Domain.Entities.Supplement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Supplements");
                });

            modelBuilder.Entity("NutrientSupplement", b =>
                {
                    b.Property<int>("NutrientsId")
                        .HasColumnType("integer");

                    b.Property<int>("SupplementId")
                        .HasColumnType("integer");

                    b.HasKey("NutrientsId", "SupplementId");

                    b.HasIndex("SupplementId");

                    b.ToTable("NutrientSupplement");
                });

            modelBuilder.Entity("DietAssessmentApi.Domain.Entities.NutrientReport", b =>
                {
                    b.HasOne("DietAssessmentApi.Domain.Entities.Nutrient", "Nutrient")
                        .WithMany()
                        .HasForeignKey("NutrientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nutrient");
                });

            modelBuilder.Entity("NutrientSupplement", b =>
                {
                    b.HasOne("DietAssessmentApi.Domain.Entities.Nutrient", null)
                        .WithMany()
                        .HasForeignKey("NutrientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DietAssessmentApi.Domain.Entities.Supplement", null)
                        .WithMany()
                        .HasForeignKey("SupplementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
